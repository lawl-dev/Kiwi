using MyNamespace

namespace MyNamespaceName
{
	infix func MyInfixFunction(MyTypeA myParamA, MyTypeA myParamB) -> MyReturnType
	{
		...
		return myResult 
	}

	descriptor MyDescriptorName
	{
		func MyFunc(MyTypeA myParameterName)
		func MyFunc2(MyType myParameterName, ..MyType myParamsParameters) -> MyReturnType		
	}

	func GenericFunction!(TypeA, TypeB)(TypeA a, TypeB b) 
	{
		...
	}
	
	func GenericFunctionSingleArg!(TypeA)(TypeA a) -> int
	{
		immut anonFunc : func!(TypeX, TypeY)(TypeX x, TypeY y) -> return x
		anonFunc!(a, a)
	}
	
	class GenericClass(TypeA, TypeB)
	{
		var mutable1 : None TypeA;
		var mutable2 : None TypeB;
		
		Constructor(TypeA arg1, TypeB arg2)
		{
			mutable1 : arg1;
			mutable2 : arg2;
			
			var i : GenericFunctionSingleArg!(arg1); 
			var b : GenericFunction!(arg1, arg2);
		}
	}
		
	class MyClassName is MyDescriptorName
	{
		immut myImmutableReferenceA : new myTypeA()
		immut myImmutableReferenceB
		var myMutableReferenceC : None MyTypeA
		
		Constructor(MyTypeA constructorParameterA)
		{
			myImmutableReferenceB : constructorParameterA
		}
		
		operator Div(MyClassName opA, MyClassName opB) -> int
		{
			//div operator for MyClassName
		}
		
		func MyFunc(MyTypeA myParameterName)
		{
			myMutableReferenceC : myParameterName MyInfixFunction myParameterName
		}
		
		func MyFunc2(MyType myParameterName, ..MyType myParamsParameters) -> MyReturnType
		{			
			var localA : GetLength(myParamsParameters)
			{
				immut immutableLocalScopeB : localA
				if(immutableLocalScopeB is int)
				{
					WorkWithInt(immutableLocalScopeB)
				}
				else throw new Error("Expected int");
			}
			return new MyReturnType(localA)
		}
		
		func GetLength(MyType[] arr) -> return arr.Length(0)
		
		func WorkWithInt(int myInt) -> myInt * 2
		
		func LookAtMyAwesomeMatch()
		{
			match(1)
			{
				case is Int    -> ...
				case !0	       -> ...
				case in 1..10  -> ...
				case !in 11.20 -> ...
				case > 30	   -> ...
				else		   -> 
				{
				
				}
			}
		}
		
		func LookAtMyAwesomeFor(MyType[] arr)
		{
			for(var item in arr)
			{
				var i : index; 
			}
			
			forr(var item in arr)
			{
			
			}
			
			for(var i : 0; i < arr.Length(0); i+:1)
			{
			
			}
		}
		
		func LookAtMyFunctions(func(int, string, TypeA) functionParameter)
		{
			var funcA : func(int a, int b) -> return a * b
			var val : funcA(1, 2)
			
			var inferredTypedFunc : func(val, val) -> return a * b
		}
		
		func LookAtMyAwesomeIf(int paramA)
		{
			var a : if(paramA > 1) true
					else if(paramA < 3) true
					else if(paramA is int) false
					else false
			
			if(a)
			{
				
			}
			else throw Error("wtf")			
		}
	}
}



